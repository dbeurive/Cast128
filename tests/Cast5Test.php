<?php

use dbeurive\Cast128\Cast128;

/**
 * Class Cast128Test
 *
 * This class implements the tests provided within the appendix B of the RFC 2144.
 */

class Cast128Test extends \PHPUnit_Framework_TestCase
{

    public function testCypherWord1() {
        $key = array(0x01, 0x23, 0x45, 0x67, 0x12, 0x34, 0x56, 0x78, 0x23, 0x45, 0x67, 0x89, 0x34, 0x56, 0x78, 0x9A);
        $plaintext = array(0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF);
        $expected = array(0x23, 0x8B, 0x4F, 0xE5, 0x84, 0x7E, 0x44, 0xB2);
        $cypher = new Cast128($key);
        $ciphered = $cypher->cypher($plaintext);
        $this->assertEquals($ciphered, $expected);
    }

    public function testCypherWord2() {
        $key = array(0x01, 0x23, 0x45, 0x67, 0x12, 0x34, 0x56, 0x78, 0x23, 0x45);
        $plaintext = array(0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF);
        $expected = array(0xEB, 0x6A, 0x71, 0x1A, 0x2C, 0x02, 0x27, 0x1B);
        $cypher = new Cast128($key);
        $ciphered = $cypher->cypher($plaintext);
        $this->assertEquals($ciphered, $expected);
    }

    public function testCypherWord3() {
        $key = array(0x01, 0x23, 0x45, 0x67, 0x12);
        $plaintext = array(0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF);
        $expected = array(0x7A, 0xC8, 0x16, 0xD1, 0x6E, 0x9B, 0x30, 0x2E);
        $cypher = new Cast128($key);
        $ciphered = $cypher->cypher($plaintext);
        $this->assertEquals($ciphered, $expected);
    }

    public function testFullMaintenance() {
        $a = array(0x01, 0x23, 0x45, 0x67, 0x12, 0x34, 0x56, 0x78, 0x23, 0x45, 0x67, 0x89, 0x34, 0x56, 0x78, 0x9A);
        $b = array(0x01, 0x23, 0x45, 0x67, 0x12, 0x34, 0x56, 0x78, 0x23, 0x45, 0x67, 0x89, 0x34, 0x56, 0x78, 0x9A);
        $aL = array_slice($a, 0, 8);
        $aR = array_slice($a, 8, 8);
        $bL = array_slice($b, 0, 8);
        $bR = array_slice($b, 8, 8);

        for ($i=0; $i<1000000; $i++) {
            $cypherB = new Cast128($b);
            $aL = $cypherB->cypher($aL);
            $aR = $cypherB->cypher($aR);
            $a = array_merge($aL, $aR);

            $cypherA = new Cast128($a);
            $bL = $cypherA->cypher($bL);
            $bR = $cypherA->cypher($bR);
            $b = array_merge($bL, $bR);
        }

        $expectedA = array(0xEE, 0xA9, 0xD0, 0xA2, 0x49, 0xFD, 0x3B, 0xA6, 0xB3, 0x43, 0x6F, 0xB8, 0x9D, 0x6D, 0xCA, 0x92);
        $expectedB = array(0xB2, 0xC9, 0x5E, 0xB0, 0x0C, 0x31, 0xAD, 0x71, 0x80, 0xAC, 0x05, 0xB8, 0xE8, 0x3D, 0x69, 0x6E);

        $this->assertEquals($a, $expectedA);
        $this->assertEquals($b, $expectedB);
    }

}